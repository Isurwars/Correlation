import { VerticalBox, HorizontalBox, Button, LineEdit, CheckBox, ProgressIndicator, ScrollView, GroupBox, ComboBox } from "std-widgets.slint";

export component AppWindow inherits Window {
    // Callbacks that the UI invokes on the C++ side
    callback run_analysis();
    callback browse_file();
    callback check_file_dialog_status();

    // Properties that C++ updates to change the UI
    in-out property <string> status_text: "Please load a structure file.";
    in-out property <string> in_file_text: "";
    in-out property <float> progress: 0.0;
    in-out property <bool> analysis_running: false;
    in-out property <bool> timer_running: false;
    in-out property <bool> text_opacity: true;
    in-out property <bool> text_timer_running: true;

    // User-configurable options, now exposed to the UI
    in-out property <string> r_max: "20.0";
    in-out property <string> r_bin_width: "0.02";
    in-out property <string> q_max: "20.0";
    in-out property <string> q_bin_width: "0.02";
    in-out property <string> angle_max: "180.0";
    in-out property <string> angle_bin_width: "1.0";
    in-out property <string> bond_factor: "1.2";
    in-out property <bool> smoothing: false;
    in-out property <string> smoothing_sigma: "3.0";
    in-out property <int> smoothing_kernel: 0;

    width: 600px;
    height: 800px;
    title: "Correlation Analysis Tool";
    property <image> logo-icon: @image-url("../Images/Logo.png");
    icon: logo-icon;
    default-font-size: 12px;

    timer := Timer {
        interval: 200ms;
        running: timer_running;
        triggered() => {
            check_file_dialog_status();
        }
    }

    text_timer := Timer {
        interval: 1s;
        running: text_timer_running;
        triggered() => {
            text_opacity = !text_opacity;
        }
    }

    VerticalBox {
        padding: 5px;
        spacing: 50px;

        VerticalBox {
            GroupBox {
                title: "1. Input File";
                VerticalBox {
                    Button {
                        text: "Load Structure File";
                        enabled: !analysis_running;
                        clicked => {
                            browse_file();
                        }
                    }

                    Text {
                        height: 20px;
                        text: status_text;
                        opacity: text_opacity ? 1.0 : 0.0;
                        animate opacity { duration: 500ms; }
                    }
                }
            }

            GroupBox {
                title: "2. Analysis Options";
                VerticalBox {
                    spacing: 10px;
                    HorizontalBox {
                        spacing: 10px;
                        VerticalBox {
                            spacing: 5px;
                            Text {
                                text: "RDF Max r (Å)";
                            }

                            LineEdit {
                                text: r_max;
                                edited(s) => {
                                    r_max = s.to-float();
                                }
                            }
                        }

                        VerticalBox {
                            spacing: 5px;
                            Text {
                                text: "RDF Bin Width (Å)";
                            }

                            LineEdit {
                                text: r_bin_width;
                                edited(s) => {
                                    r_bin_width = s.to-float();
                                }
                            }
                        }

                        VerticalBox {
                            spacing: 5px;
                            Text {
                                text: "Bond Parameter";
                            }

                            LineEdit {
                                text: bond_factor;
                                edited(s) => {
                                    bond_factor = s.to-float();
                                }
                            }
                        }
                    }

                    HorizontalBox {
                        spacing: 10px;
                        VerticalBox {
                            spacing: 5px;
                            Text {
                                text: "PAD Max Angle (°)";
                            }

                            LineEdit {
                                text: angle_max;
                                edited(s) => {
                                    angle_max = s.to-float();
                                }
                            }
                        }

                        VerticalBox {
                            spacing: 5px;
                            Text {
                                text: "PAD Bin Width (°)";
                            }

                            LineEdit {
                                text: angle_bin_width;
                                edited(s) => {
                                    angle_bin_width = s.to-float();
                                }
                            }
                        }
                    }

                    HorizontalBox {
                        spacing: 10px;
                        VerticalBox {
                            spacing: 5px;
                            Text {
                                text: "S(Q) Max Q (Å⁻¹)";
                            }

                            LineEdit {
                                text: q_max;
                                edited(s) => {
                                    q_max = s.to-float();
                                }
                            }
                        }

                        VerticalBox {
                            spacing: 5px;
                            Text {
                                text: "S(Q) Bin Width (Å⁻¹)";
                            }

                            LineEdit {
                                text: q_bin_width;
                                edited(s) => {
                                    q_bin_width = s.to-float();
                                }
                            }
                        }
                    }

                    HorizontalBox {
                        spacing: 10px;
                        VerticalBox {
                            spacing: 5px;
                            CheckBox {
                                text: "Enable Smoothing";
                                checked: smoothing;
                                toggled => {
                                    smoothing = !smoothing;
                                }
                            }
                        }

                        VerticalBox {
                            spacing: 5px;
                            Text {
                                text: "Smoothing Sigma";
                            }

                            LineEdit {
                                enabled: smoothing;
                                text: smoothing_sigma;
                                edited(s) => {
                                    smoothing_sigma = s.to-float();
                                }
                            }
                        }

                        VerticalBox {
                            spacing: 5px;
                            Text {
                                text: "Smoothing Kernel";
                            }

                            ComboBox {
                                enabled: smoothing;
                                model: ["Gaussian", "Bump", "Triweight"];
                                current-index: smoothing_kernel;
                                selected(i) => {
                                    smoothing_kernel = i.to-float();
                                }
                            }
                        }
                    }
                }
            }

            GroupBox {
                title: "3. Run Analysis";
                Button {
                    text: analysis_running ? "Analysis in Progress..." : "Run Analysis";
                    enabled: !analysis_running;
                    clicked => {
                        status_text = "Running Analysis...";
                        run_analysis();
                        status_text = "Analysis ended.";
                    }
                }
            }
        }
    }
}
