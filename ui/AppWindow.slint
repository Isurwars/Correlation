import { VerticalBox, HorizontalBox, Button, LineEdit, CheckBox, GroupBox, ComboBox } from "std-widgets.slint";
import {InputGroup} from "InputGroup.slint";
import { ToolTip } from "ToolTip.slint";
import { Theme } from "Theme.slint";



export component AppWindow inherits Window {

    // Callbacks that the UI invokes on the C++ side
    callback run_analysis();
    callback browse_file();
    callback check_file_dialog_status();

    // Properties that C++ updates to change the UI
    in-out property <string> file_status_text: "Please load a structure file.";
    in-out property <string> analysis_status_text: "";
    in-out property <float> progress: 0.0;
    in-out property <bool> analysis_running: false;
    in-out property <bool> timer_running: false;
    in-out property <bool> text_opacity: true;

    // User-configurable options, now exposed to the UI
    in-out property <string> in_file_text;
    in-out property <bool> normalize;
    in-out property <bool> smoothing;
    in-out property <string> r_max;
    in-out property <string> r_bin_width;
    in-out property <string> q_max;
    in-out property <string> q_bin_width;
    in-out property <string> r_int_max;
    in-out property <string> angle_max;
    in-out property <string> angle_bin_width;
    in-out property <string> bond_factor;
    in-out property <string> smoothing_sigma;
    in-out property <int> smoothing_kernel;

    // Theme
    width: 550px;
    height: 600px;
    background: Theme.window-background;
    default-font-size: Theme.font-size-regular;
    default-font-family: Theme.font-family;
    default-font-weight: Theme.font-weight-regular;
    property <image> logo-icon: @image-url("../Images/Logo.png");
    icon: logo-icon;
    title: "Correlation Analysis Tool";

    timer := Timer {
        interval: 200ms;
        running: timer_running;
        triggered() => {
            check_file_dialog_status();
        }
    }

    window_area := TouchArea {

        VerticalBox {
            file_area := TouchArea {
                width: parent.width;
                height: parent.height / 4;
                GroupBox {
                    width: parent.width;
                    height: parent.height;
                    title: "1. Input File";
                    VerticalBox {
                        Button {
                            text: "Load a structure file";
                            clicked => {
                                browse_file();
                            }
                        }

                        Text {
                            text: file_status_text;
                        }
                    }
                }
            }

            GridLayout {
                padding: Theme.spacing-regular;
                spacing: Theme.spacing-medium;
                width: parent.width;
                height: parent.height / 2;
                Row {
                    Text {
                        text: "2. Options";
                        height: Theme.size-small;
                    }
                }

                Row {
                    r_max_area := InputGroup {
                        label_text: "RDF Max r";
                        unit_text: "Å";
                        value_text <=> r_max;
                    }

                    r_bin_area := InputGroup {
                        label_text: "RDF Bin Width";
                        unit_text: "Å";
                        value_text <=> r_bin_width;
                    }

                    bond_area := InputGroup {
                        label_text: "Bond Parameter";
                        value_text <=> bond_factor;
                    }
                }

                Row {
                    theta_max_area := InputGroup {
                        label_text: "PAD Max Angle";
                        unit_text: "°";
                        value_text <=> angle_max;
                    }

                    theta_bin_area := InputGroup {
                        label_text: "PAD Bin Width";
                        unit_text: "°";
                        value_text <=> angle_bin_width;
                    }
                }

                Row {
                    s_max_area := InputGroup {
                        label_text: "Max Q";
                        unit_text: "Å⁻¹";
                        value_text <=> q_max;
                    }

                    s_bin_area := InputGroup {
                        label_text: "S(Q) Bin Width";
                        unit_text: "Å⁻¹";
                        value_text: q_bin_width;
                    }

                    r_int_area := InputGroup {
                        label_text: "Max r for the FT";
                        unit_text: "Å";
                        value_text: r_int_max;
                    }
                }

                Row {
                    smooth_area := TouchArea {
                        VerticalBox {
                            CheckBox {
                                text: "Enable Smoothing";
                                checked: smoothing;
                                toggled => {
                                    smoothing = !smoothing;
                                }
                            }
                        }
                    }

                    sigma_area := InputGroup {
                        label_text: "Smoothing Sigma";
                        enabled_input: smoothing;
                        value_text <=> smoothing_sigma;
                    }

                    kernel_area := TouchArea {
                        VerticalBox {
                            Text {
                                text: "Smoothing Kernel";
                            }

                            ComboBox {
                                enabled: smoothing;
                                model: ["Gaussian", "Bump", "Triweight"];
                                current-index: smoothing_kernel;
                                selected(i) => {
                                    smoothing_kernel = i.to-float();
                                }
                            }
                        }
                    }
                }
            }

            analysis_area := TouchArea {
                width: parent.width;
                height: parent.height / 4;
                GroupBox {
                    width: parent.width;
                    height: parent.height;

                    title: "3. Run Analysis";
                    VerticalBox {
                        Button {
                            text: analysis_running ? "Analysis in Progress..." : "Run Analysis";
                            enabled: !analysis_running;
                            clicked => {
                                analysis_status_text = "Running Analysis...";
                                run_analysis();
                                analysis_status_text = "Analysis ended.";
                            }
                        }

                        Text {
                            text: analysis_status_text;
                        }
                    }
                }
            }
        }
    }

    file_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Load a structure file";
        user_is_hovering: file_area.has-hover;
        width: 135px;
        height: 25px;
    }

    r_max_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Maximum radius to calculate Radial Distribution Functions (g(r), J(r), G(r)).\nThe recommended max radius is 20 Å.";
        user_is_hovering: r_max_area.has-hover;
        width: 260px;
        height: 55px;
    }

    r_bin_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Bin width used to calculate the histograms for the Radial Distribution \nFunctions (g(r), J(r), G(r)).\nThe recommended bin is 0.02 Å.";
        user_is_hovering: r_bin_area.has-hover;
        width: 250px;
        height: 70px;
    }

    bond_tip := ToolTip {
        x: window_area.mouse_x - 235px;
        y: window_area.mouse_y + 20px;
        text: "Bond factor used to determine if two atoms are bonded. The bond parameter is calculated as follows:\nb = (max_bond_distance)/\n    (sum_of_covalent_radii).\nThe default bond parameter is 1.2.";
        user_is_hovering: bond_area.has-hover;
        width: 225px;
        height: 100px;
    }

    theta_max_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Maximum angle to calculate the Plane-Angle Distribution (F(θ)).\nThe recommended max angle is 180°.";
        user_is_hovering: theta_max_area.has-hover;
        width: 230px;
        height: 55px;
    }

    theta_bin_tip := ToolTip {
        x: window_area.mouse_x - 190px;
        y: window_area.mouse_y + 20px;
        text: "Bin width used to calculate the histograms for the Plane-Angle Distribution.\nThe recommended bin is 1.0°.";
        user_is_hovering: theta_bin_area.has-hover;
        width: 180px;
        height: 70px;
    }

    s_max_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Maximum scattering vector (Q) to calculate the Structure Factor (S(Q)).\nThe recommended max scattering vector is 20.0 Å⁻¹";
        user_is_hovering: s_max_area.has-hover;
        width: 245px;
        height: 70px;
    }

    s_bin_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Bin width used to calculate the histograms for the Structure Factor.\nThe recommended bin is 0.02 Å⁻¹.";
        user_is_hovering: s_bin_area.has-hover;
        width: 225px;
        height: 55px;
    }

    r_int_tip := ToolTip {
        x: window_area.mouse_x - 215px;
        y: window_area.mouse_y + 20px;
        text: "Maximum radius for the Fourier Transform of the g(r) used to\ncalculate the Structure Factor.\nThe recommended max radius is 10.0 Å";
        user_is_hovering: r_int_area.has-hover;
        width: 225px;
        height: 70px;
    }

    smooth_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Enable the smoothing of the\ndistribution functions.";
        user_is_hovering: smooth_area.has-hover;
        width: 175px;
        height: 40px;
    }

    sigma_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Sigma to be used for the smoothing\nof the distribution functions.\nThe recommended  sigma is 0.01.";
        user_is_hovering: sigma_area.has-hover;
        width: 220px;
        height: 55px;
    }

    kernel_tip := ToolTip {
        x: window_area.mouse_x - 270px;
        y: window_area.mouse_y + 20px;
        text: "The kernel used by the kernel smoother.\nThe recommended kernel is the Gaussian kernel.";
        user_is_hovering: kernel_area.has-hover;
        width: 260px;
        height: 55px;
    }
}
