import { VerticalBox, HorizontalBox, Button, LineEdit, CheckBox, GroupBox, ComboBox } from "std-widgets.slint";
import {InputGroup} from "InputGroup.slint";
import { ToolTip } from "ToolTip.slint";



export component AppWindow inherits Window {

    // Callbacks that the UI invokes on the C++ side
    callback run_analysis();
    callback browse_file();
    callback check_file_dialog_status();

    // Properties that C++ updates to change the UI
    in-out property <string> file_status_text: "Please load a structure file.";
    in-out property <string> analysis_status_text: "";
    in-out property <float> progress: 0.0;
    in-out property <bool> analysis_running: false;
    in-out property <bool> timer_running: false;
    in-out property <bool> text_opacity: true;
    in-out property <bool> text_timer_running: true;

    // User-configurable options, now exposed to the UI
    in-out property <string> in_file_text;
    in-out property <bool> normalize;
    in-out property <bool> smoothing;
    in-out property <string> r_max;
    in-out property <string> r_bin_width;
    in-out property <string> q_max;
    in-out property <string> q_bin_width;
    in-out property <string> r_int_max;
    in-out property <string> angle_max;
    in-out property <string> angle_bin_width;
    in-out property <string> bond_factor;
    in-out property <string> smoothing_sigma;
    in-out property <int> smoothing_kernel;
    width: 600px;
    height: 800px;
    title: "Correlation Analysis Tool";
    property <image> logo-icon: @image-url("../Images/Logo.png");
    icon: logo-icon;
    default-font-size: 12px;

    timer := Timer {
        interval: 200ms;
        running: timer_running;
        triggered() => {
            check_file_dialog_status();
        }
    }

    text_timer := Timer {
        interval: 1s;
        running: text_timer_running;
        triggered() => {
            text_opacity = !text_opacity;
        }
    }

    window_area := TouchArea {

        VerticalBox {
            padding: 10px;
            spacing: 0px;
            file_area := TouchArea {

                GroupBox {
                    title: "1. Input File";
                    width: parent.width;
                    height: parent.height;
                    VerticalBox {
                        padding: 10px;
                        Button {
                            text: "Load a structure file";
                            enabled: !analysis_running;
                            clicked => {
                                browse_file();
                            }
                        }

                        Text {
                            height: 20px;
                            text: file_status_text;
                            opacity: text_opacity ? 1.0 : 0.0;
                            animate opacity { duration: 500ms; }
                        }
                    }
                }
            }

            GroupBox {
                title: "2. Analysis Options";
                VerticalBox {
                    padding: 0px;
                    spacing: 0px;
                    HorizontalBox {
                        r_max_area := InputGroup {
                            label_text: "RDF Max r";
                            unit_text: "Å";
                            value_text: r_max;
                        }

                        r_bin_area := InputGroup {
                            label_text: "RDF Bin Width";
                            unit_text: "Å";
                            value_text: r_bin_width;
                        }

                        bond_area := InputGroup {
                            label_text: "Bond Parameter";
                            value_text: bond_factor;
                        }
                    }

                    HorizontalBox {
                        theta_max_area := InputGroup {
                            label_text: "PAD Max Angle";
                            unit_text: "°";
                            value_text: angle_max;
                        }

                        theta_bin_area := InputGroup {
                            label_text: "PAD Bin Width";
                            unit_text: "°";
                            value_text: angle_bin_width;
                        }
                    }

                    HorizontalBox {
                        s_max_area := InputGroup {
                            label_text: "Max Q";
                            unit_text: "Å⁻¹";
                            value_text: q_max;
                        }

                        s_bin_area := InputGroup {

                            label_text: "S(Q) Bin Width";
                            unit_text: "Å⁻¹";
                            value_text: q_bin_width;
                        }

                        r_int_area := InputGroup {
                            label_text: "Max r for the FT";
                            unit_text: "Å";
                            value_text: r_int_max;
                        }
                    }

                    HorizontalBox {
                        smooth_area := TouchArea {
                            VerticalBox {
                                CheckBox {
                                    text: "Enable Smoothing";
                                    checked: smoothing;
                                    toggled => {
                                        smoothing = !smoothing;
                                    }
                                }
                            }
                        }

                        sigma_area := InputGroup {
                            label_text: "Smoothing Sigma";
                            enabled_input: smoothing;
                            value_text: smoothing_sigma;
                        }

                        kernel_area := TouchArea {
                            VerticalBox {
                                Text {
                                    text: "Smoothing Kernel";
                                }

                                ComboBox {
                                    enabled: smoothing;
                                    model: ["Gaussian", "Bump", "Triweight"];
                                    current-index: smoothing_kernel;
                                    selected(i) => {
                                        smoothing_kernel = i.to-float();
                                    }
                                }
                            }
                        }
                    }
                }
            }

            analysis_area := TouchArea {
                GroupBox {
                    width: parent.width;
                    height: parent.height;
                    title: "3. Run Analysis";
                    VerticalBox {
                        padding: 10px;
                        Button {

                            text: analysis_running ? "Analysis in Progress..." : "Run Analysis";
                            enabled: !analysis_running;
                            clicked => {
                                analysis_status_text = "Running Analysis...";
                                run_analysis();
                                analysis_status_text = "Analysis ended.";
                            }
                        }

                        Text {
                            height: 20px;
                            text: analysis_status_text;
                        }
                    }
                }
            }
        }
    }

    file_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Load a structure file";
        user_is_hovering: file_area.has-hover;
        width: 125px;
        height: 25px;
    }

    r_max_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Maximum radius to calculate Radial Distribution Functions (g(r), J(r), G(r)).\nThe recommended max radius is 20 Å.";
        user_is_hovering: r_max_area.has-hover;
        width: 230px;
        height: 60px;
    }

    r_bin_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Bin width used to calculate the histograms for the Radial Distribution \nFunctions (g(r), J(r), G(r)).\nThe recommended bin is 0.02 Å.";
        user_is_hovering: r_bin_area.has-hover;
        width: 230px;
        height: 75px;
    }

    bond_tip := ToolTip {
        x: window_area.mouse_x - 235px;
        y: window_area.mouse_y + 20px;
        text: "Bond factor used to determine if two atoms are bonded. The bond parameter is calculated as follows:\nb = (max_bond_distance)/\n       (sum_of_covalent_radii).\nThe default bond parameter is 1.2.";
        user_is_hovering: bond_area.has-hover;
        width: 225px;
        height: 105px;
    }

    theta_max_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Maximum angle to calculate the Plane-Angle Distribution (F(θ)).\nThe recommended max angle is 180°.";
        user_is_hovering: theta_max_area.has-hover;
        width: 230px;
        height: 60px;
    }

    theta_bin_tip := ToolTip {
        x: window_area.mouse_x - 190px;
        y: window_area.mouse_y + 20px;
        text: "Bin width used to calculate the histograms for the Plane-Angle Distribution.\nThe recommended bin is 1.0°.";
        user_is_hovering: theta_bin_area.has-hover;
        width: 180px;
        height: 75px;
    }

    s_max_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Maximum scattering vector (Q) to calculate the Structure Factor (S(Q)).\nThe recommended max scattering vector is 20.0 Å⁻¹";
        user_is_hovering: s_max_area.has-hover;
        width: 215px;
        height: 75px;
    }

    s_bin_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Bin width used to calculate the histograms for the Structure Factor.\nThe recommended bin is 0.02 Å⁻¹.";
        user_is_hovering: s_bin_area.has-hover;
        width: 165px;
        height: 90px;
    }

    r_int_tip := ToolTip {
        x: window_area.mouse_x - 215px;
        y: window_area.mouse_y + 20px;
        text: "Maximum radius for the Fourier Transform of the g(r) used to\ncalculate the Structure Factor.\nThe recommended max radius is 10.0 Å";
        user_is_hovering: r_int_area.has-hover;
        width: 205px;
        height: 90px;
    }

    smooth_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Enable the smoothing of the\ndistribution functions.";
        user_is_hovering: smooth_area.has-hover;
        width: 175px;
        height: 45px;
    }

    sigma_tip := ToolTip {
        x: window_area.mouse_x + 20px;
        y: window_area.mouse_y + 20px;
        text: "Sigma to be used for the smoothing\nof the distribution functions.\nThe recommended  sigma is 0.01.";
        user_is_hovering: sigma_area.has-hover;
        width: 220px;
        height: 60px;
    }

    kernel_tip := ToolTip {
        x: window_area.mouse_x - 250px;
        y: window_area.mouse_y + 20px;
        text: "The kernel used by the kernel smoother.\nThe recommended kernel is the Gaussian kernel.";
        user_is_hovering: kernel_area.has-hover;
        width: 240px;
        height: 60px;
    }
}
