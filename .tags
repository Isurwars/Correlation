!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ArgParser	.\src\main.cpp	/^void ArgParser(int argc, char* *argv) {$/;"	f
Atom	.\src\Atom.cpp	/^Atom::Atom() {$/;"	f	class:Atom
Atom	.\src\Atom.cpp	/^Atom::Atom(std::string ele, std::array<double, 3> pos) {$/;"	f	class:Atom
Atom	.\src\Atom.h	/^class Atom {$/;"	c
Atom_Img	.\src\Atom.h	/^struct Atom_Img {$/;"	s
Cell	.\src\Cell.cpp	/^Cell::Cell() {$/;"	f	class:Cell
Cell	.\src\Cell.cpp	/^Cell::Cell(std::array<double, 6> lat) {$/;"	f	class:Cell
Cell	.\src\Cell.h	/^class Cell {$/;"	c
CoordinationNumber	.\src\Cell.cpp	/^void Cell::CoordinationNumber() {$/;"	f	class:Cell
CoordinationNumberHistogram	.\src\Cell.cpp	/^void Cell::CoordinationNumberHistogram(std::string filename) {$/;"	f	class:Cell
CorrectFracPositions	.\src\Cell.cpp	/^void Cell::CorrectFracPositions() {$/;"	f	class:Cell
CorrectPositions	.\src\Cell.cpp	/^void Cell::CorrectPositions() {$/;"	f	class:Cell
Covalent_Radii	.\src\Constants.cpp	/^double Covalent_Radii(std::string element) {$/;"	f
Distance	.\src\Atom.cpp	/^double Atom::Distance(const Atom& other_atom) {$/;"	f	class:Atom
DistancePopulation	.\src\Cell.cpp	/^void Cell::DistancePopulation(double r_cut) {$/;"	f	class:Cell
DistancePopulationMultiThreading	.\src\Cell.cpp	/^void Cell::DistancePopulationMultiThreading(double r_cut) {$/;"	f	class:Cell
G	.\src\Cell.h	/^  std::vector < std::vector < double >> G;$/;"	m	class:Cell
GaussianKernel	.\src\Smoothing.cpp	/^std::vector<double> GaussianKernel(double r0, std::vector<double> r_vals, double sigma) {$/;"	f
GetAngle	.\src\Atom.cpp	/^double Atom::GetAngle(Atom_Img atom_A, Atom_Img atom_B) {$/;"	f	class:Atom
GetExtension	.\src\main.cpp	/^std::pair<std::string, std::string> GetExtension(std::string filename) {$/;"	f
GetID	.\src\Atom.h	/^  int GetID() { return id; }$/;"	f	class:Atom
GetImage	.\src\Atom.cpp	/^Atom_Img Atom::GetImage() {$/;"	f	class:Atom
GetNumberOfAtoms	.\src\Atom.h	/^  static int GetNumberOfAtoms() { return NumOfAtoms; }$/;"	f	class:Atom
J	.\src\Cell.h	/^  std::vector < std::vector < double >> J;$/;"	m	class:Cell
KernelSmoothing	.\src\Smoothing.cpp	/^std::vector<double> KernelSmoothing(std::vector<double> r,$/;"	f
NumOfAtoms	.\src\Atom.cpp	/^int Atom::NumOfAtoms = 0;$/;"	m	class:Atom	file:
NumOfAtoms	.\src\Atom.h	/^  static int NumOfAtoms;$/;"	m	class:Atom
PAD	.\src\Cell.cpp	/^void Cell::PAD(bool degree) {$/;"	f	class:Cell
PADHistogram	.\src\Cell.cpp	/^void Cell::PADHistogram(std::string filename, double theta_cut, double bin_width) {$/;"	f	class:Cell
PopulateBondLength	.\src\Cell.cpp	/^void Cell::PopulateBondLength(double Bond_Factor) {$/;"	f	class:Cell
PrintHelp	.\src\main.cpp	/^void PrintHelp() {$/;"	f
RDFHistogram	.\src\Cell.cpp	/^void Cell::RDFHistogram(std::string filename, double r_cut, double bin_width, bool normalize) {$/;"	f	class:Cell
ReadBOND	.\src\Cell.cpp	/^void Cell::ReadBOND(std::string file_name) {$/;"	f	class:Cell
S	.\src\Cell.h	/^  std::vector < std::vector < double >> S;$/;"	m	class:Cell
SQ	.\src\Cell.cpp	/^void Cell::SQ(std::string filename, double q_bin_width, double bin_width, double r_cut, bool normalize) {$/;"	f	class:Cell
SRC_ATOM_H_	.\src\Atom.h	2;"	d
SRC_CELL_H_	.\src\Cell.h	2;"	d
SRC_CONSTANTS_H_	.\src\Constants.h	2;"	d
SRC_READFILES_H_	.\src\ReadFiles.h	2;"	d
SRC_SMOOTHING_H_	.\src\Smoothing.h	2;"	d
SetAll	.\src\Atom.cpp	/^void Atom::SetAll(std::string ele, std::array<double, 3> pos) {$/;"	f	class:Atom
SetFromVectors	.\src\Cell.cpp	/^void Cell::SetFromVectors(std::vector<double> v1,$/;"	f	class:Cell
SetID	.\src\Atom.h	/^  void SetID(int num) { this->id = num; }$/;"	f	class:Atom
SetLatticeVectors	.\src\Cell.cpp	/^void Cell::SetLatticeVectors() {$/;"	f	class:Cell
UpdateProgressBar	.\src\Cell.cpp	/^void Cell::UpdateProgressBar(double pos) {$/;"	f	class:Cell
VoronoiIndex	.\src\Cell.cpp	/^void Cell::VoronoiIndex(std::string filename) {$/;"	f	class:Cell
X	.\src\Cell.h	/^  std::vector < std::vector < double >> X;$/;"	m	class:Cell
XRD	.\src\Cell.cpp	/^void Cell::XRD(std::string filename, double lambda, double theta_min, double theta_max, double bin_width) {$/;"	f	class:Cell
_angle_bin_w_	.\src\main.cpp	/^double _angle_bin_w_  = 1.0;$/;"	v
_bin_w_	.\src\main.cpp	/^double _bin_w_        = 0.05;$/;"	v
_bond_file_name_	.\src\main.cpp	/^inline std::string _bond_file_name_ = "";$/;"	v
_bond_in_file_	.\src\main.cpp	/^bool   _bond_in_file_ = false;$/;"	v
_bond_par_	.\src\main.cpp	/^double _bond_par_     = 1.3;$/;"	v
_in_file_name_	.\src\main.cpp	/^inline std::string _in_file_name_   = "";$/;"	v
_normalize_	.\src\main.cpp	/^bool   _normalize_    = false;$/;"	v
_out_file_name_	.\src\main.cpp	/^inline std::string _out_file_name_  = "";$/;"	v
_q_bin_w_	.\src\main.cpp	/^double _q_bin_w_      = 0.1570796326;$/;"	v
_r_cut_	.\src\main.cpp	/^double _r_cut_        = 20.0;$/;"	v
angles	.\src\Cell.h	/^  std::vector < std::vector < std::vector < std::vector < double >> >> angles;$/;"	m	class:Cell
atom_id	.\src\Atom.h	/^  int atom_id;$/;"	m	struct:Atom_Img
atoms	.\src\Cell.h	/^  std::list < Atom > atoms;$/;"	m	class:Cell
bond_length	.\src\Cell.h	/^  std::vector < std::vector < double >> bond_length;$/;"	m	class:Cell
bonded_atoms	.\src\Atom.h	/^  std::vector < Atom_Img > bonded_atoms;$/;"	m	class:Atom
constants	.\src\Constants.h	/^namespace constants {$/;"	n
coordination	.\src\Cell.h	/^  std::vector < std::vector < std::vector < int >> > coordination;$/;"	m	class:Cell
distances	.\src\Cell.h	/^  std::vector < std::vector < std::vector < double >> > distances;$/;"	m	class:Cell
element	.\src\Atom.h	/^  std::string element;$/;"	m	class:Atom
element_id	.\src\Atom.h	/^  int         element_id;$/;"	m	class:Atom
element_id	.\src\Atom.h	/^  int element_id;$/;"	m	struct:Atom_Img
element_numbers	.\src\Cell.h	/^  std::vector < int > element_numbers;$/;"	m	class:Cell
elements	.\src\Cell.h	/^  std::vector < std::string > elements;$/;"	m	class:Cell
f_theta	.\src\Cell.h	/^  std::vector < std::vector < double >> f_theta;$/;"	m	class:Cell
findInVector	.\src\Cell.cpp	/^template<typename T> std::pair<bool, int> findInVector(const std::vector<T>& vecOfElements, const T& element) {$/;"	f
findInVector	.\src\ReadFiles.cpp	/^std::pair<bool, int> findInVector(const std::vector<T>& vecOfElements,$/;"	f
fwhm2sigma	.\src\Smoothing.cpp	/^double fwhm2sigma(double fwhm) {$/;"	f
g	.\src\Cell.h	/^  std::vector < std::vector < double >> g;$/;"	m	class:Cell
id	.\src\Atom.h	/^  int        id;$/;"	m	class:Atom
lattice_parameters	.\src\Cell.h	/^  std::array < double, 6 > lattice_parameters;$/;"	m	class:Cell
main	.\src\main.cpp	/^int main(int argc, char* *argv) {$/;"	f
position	.\src\Atom.h	/^  std::array < double, 3 > position;$/;"	m	class:Atom
position	.\src\Atom.h	/^  std::array < double, 3 > position;$/;"	m	struct:Atom_Img
read_CAR	.\src\ReadFiles.cpp	/^Cell read_CAR(std::string file_name) {$/;"	f
read_CELL	.\src\ReadFiles.cpp	/^Cell read_CELL(std::string file_name) {$/;"	f
read_CIF	.\src\ReadFiles.cpp	/^Cell read_CIF(std::string file_name) {$/;"	f
read_ONETEP_DAT	.\src\ReadFiles.cpp	/^Cell read_ONETEP_DAT(std::string file_name) {$/;"	f
sigma2fwhm	.\src\Smoothing.cpp	/^double sigma2fwhm(double sigma) {$/;"	f
v_a	.\src\Cell.h	/^  std::array < double, 3 > v_a() {$/;"	f	class:Cell
v_a_	.\src\Cell.h	/^  std::array < double, 3 > v_a_;$/;"	m	class:Cell
v_b	.\src\Cell.h	/^  std::array < double, 3 > v_b() {$/;"	f	class:Cell
v_b_	.\src\Cell.h	/^  std::array < double, 3 > v_b_;$/;"	m	class:Cell
v_c	.\src\Cell.h	/^  std::array < double, 3 > v_c() {$/;"	f	class:Cell
v_c_	.\src\Cell.h	/^  std::array < double, 3 > v_c_;$/;"	m	class:Cell
volume	.\src\Cell.h	/^  double volume;$/;"	m	class:Cell
w_ij	.\src\Cell.h	/^  std::vector < double > w_ij;$/;"	m	class:Cell
